<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.EmployeeMapper">

    <sql id="selectSql">
        select * from t_emp
    </sql>



    <select id="query" resultType="employee">
<!--        引用sql片段-->
        <include refid="selectSql"/>
        <where>
            <if test="name != null ">
                emp_name = #{name}
            </if>
            <if test=" salary != null and salary &gt; 100 ">
                and emp_salary = #{salary}
            </if>
        </where>

    </select>

    <!--
      // 根据员工的ID更新员工数据，要求传入的name和salary部位null的才更新

        int update(Employee employee);
        全部满足： 没问题
        第一个满足： 多了一个,
        第二个满足： 么问题
        都不满足： 语法错误

        <set> 1. 自动去掉多余的,
              2. 自动添加set关键字
    -->
    <update id="update">

        update t_emp
        <set>
            <if test="empName != null ">
                emp_name = #{empName},
            </if>

            <if test="empSalary != null ">
                emp_salary = #{empSalary}
            </if>
            where emp_id = #{empID}
        </set>
    </update>




<!--    List<Employee> queryTrim(@Param("name") String name, @Param("salary") Double salary);-->
    <select id="queryTrim" resultType="employee">
        <include refid="selectSql"/>
        <trim prefix="where" prefixOverrides="and|or">
            <if test="name != null ">
                emp_name = #{name}
            </if>
            <if test=" salary != null and salary &gt; 100 ">
                and emp_salary = #{salary}
            </if>
        </trim>

    </select>


    <update id="update">

        update t_emp
        <trim prefix="set" suffixOverrides=",">
            <if test="empName != null ">
                emp_name = #{empName},
            </if>

            <if test="empSalary != null ">
                emp_salary = #{empSalary}
            </if>
            where emp_id = #{empID}
        </trim>
    </update>



<!--        // 根据两个条件查询，如果姓名不为空则使用姓名查询，如果姓名为空但是薪水为空，则使用薪水查询，都为空查询全部
    List<Employee> queryChoose(@Param("name") String name, @Param("salary") Double salary);


    -->
    <select id="queryChoose" resultType="employee">
        select * from t_emp
        <where>
        <choose>
            <when  test="name != null ">
                emp_name = #{name}
            </when>
            <when  test=" salary != null ">
                and emp_salary = #{salary}
            </when>
            <otherwise> 1 = 1</otherwise>
        </choose>
        </where>
    </select>



<!--    // 根据id批量查询-->
<!--    List<Employee> queryBatch(@Param("ids") List<Integer> ids);-->

    <select id="queryBatch" resultType="employee">
        select * from t_emp
                   where emp_id in
<!--
            遍历的数据
               collection= “ids" | arg0 | list"
               open   遍历之前要追加的字符串
               close  遍历结束需要添加的字符串
               separator 每次遍历的分隔符号! 如果是最后一次不会追加
               item 获取每个遍历项
-->
                    <foreach collection="ids" open="("  separator="," close=")" item="id">
<!--                         真正的遍历的内容， #{遍历项 item指定的key}-->
                            #{id}
                    </foreach>


    </select>




<!--    // 根据id批量删除-->
<!--    int deleteBatch(@Param("ids") List<Integer> ids);-->


    <delete id="deleteBatch">
        delete from t_emp where id in
        <foreach collection="ids" open="(" separator="," close=")"  item="id">
            #{id}
        </foreach>
    </delete>

<!--    // 根据id批量添加-->
<!--    int insertBatch(@Param("list") List<Employee> employeeList);-->

    <insert id="insertBatch">
        insert into t_emp (emp_name,emp_salary)
             values
        <foreach collection="list" separator="," item="employee">
            (#{employee.empName}, #{employee.empSalary})
        </foreach>
    </insert>

<!--    // 批量更新-->
<!--    int updateBatch(@Param("list") List<Employee> employeeList);-->

<!--    如果一个标签涉及多个语句，需要设置允许执行多语句-->
    <update id="updateBaech">
        <foreach collection="list" item="emp">
            update t_emp set emp_name = #{emp.empName},emp_salary = #{emp.empSalary}
            where emp_id = ${emp.empId};
        </foreach>

    </update>



</mapper>